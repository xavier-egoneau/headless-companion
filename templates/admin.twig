{% extends "layout.twig" %}

{% block title %}Administration - CMS Headless{% endblock %}

{% block content %}
    <h1>Interface d'administration</h1>
    <div id="loginForm">
        <h2>Connexion</h2>
        <input type="text" id="username" class="form-control mb-2" placeholder="Nom d'utilisateur">
        <input type="password" id="password" class="form-control mb-2" placeholder="Mot de passe">
        <button onclick="login()" class="btn btn-primary">Se connecter</button>
    </div>
    <div id="adminPanel" style="display:none;">
        <h2>Panneau d'administration</h2>
        <button onclick="getPosts()" class="btn btn-info">Afficher les posts</button>
        <div id="postsList"></div>
        
        <div id="postForm" style="display:none;">
            <h3>Ajouter/Modifier un post</h3>
            <input type="hidden" id="postId">
            <input type="text" id="postTitle" class="form-control mb-2" placeholder="Titre du post">
            <textarea id="postContent" class="form-control mb-2" placeholder="Contenu du post" rows="5"></textarea>
            <button onclick="savePost()" class="btn btn-success">Enregistrer le post</button>
            <button onclick="resetForm()" class="btn btn-secondary">Annuler</button>
        </div>
        
        <button onclick="resetForm()" class="btn btn-primary mt-3">Nouveau Post</button>
    </div>
{% endblock %}

{% block scripts %}
<script>
    console.log('Début du chargement du script admin');
    let token = '';

    function getToken() {
        return token;
    }

     async function login() {
        try {
            const response = await fetch('/api/auth', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    username: document.getElementById('username').value,
                    password: document.getElementById('password').value
                })
            });

            const data = await response.json();
            if (data.token) {
                localStorage.setItem('authToken', data.token);  // Stockage du token
                console.log('Token stocké:', data.token);
                // Mise à jour de l'interface utilisateur après connexion réussie
                document.getElementById('loginForm').style.display = 'none';
                document.getElementById('adminPanel').style.display = 'block';
            } else {
                throw new Error('Token non reçu');
            }
        } catch (error) {
            console.error('Erreur de connexion:', error);
        }
    }

    async function getPosts() {
        try {
            const token = sessionStorage.getItem('authToken');
            if (!token) {
                throw new Error('Pas de token d\'authentification');
            }

            const response = await fetch('/api/posts', {
                headers: { 
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });
            
            console.log('Status:', response.status);
            console.log('Status Text:', response.statusText);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            const postsList = document.getElementById('postsList');
            postsList.innerHTML = data.posts.map(post => `
                <div class="card mb-2">
                    <div class="card-body">
                        <h5 class="card-title">${post.title}</h5>
                        <p class="card-text">${post.content.substring(0, 100)}...</p>
                        <button onclick="editPost(${post.id})" class="btn btn-warning btn-sm">Modifier</button>
                        <button onclick="deletePost(${post.id})" class="btn btn-danger btn-sm">Supprimer</button>
                    </div>
                </div>
            `).join('');
        } catch (error) {
            console.error('Erreur lors de la récupération des posts:', error);
            alert('Erreur lors de la récupération des posts: ' + error.message);
        }
    }



    async function savePost() {
        const id = document.getElementById('postId').value;
        const title = document.getElementById('postTitle').value;
        const content = document.getElementById('postContent').value;
        
        const url = id ? `/api/posts/${id}` : '/api/posts';
        const method = id ? 'PUT' : 'POST';

        try {
            const response = await fetch(url, {
                method: method,
                headers: {
                    'Authorization': `Bearer ${getToken()}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ title, content })
            });
            const data = await response.json();
            console.log('Post sauvegardé:', data);
            getPosts(); // Rafraîchir la liste des posts
            resetForm();
        } catch (error) {
            console.error('Erreur lors de la sauvegarde du post:', error);
        }
    }

    async function deletePost(id) {
        if (confirm('Êtes-vous sûr de vouloir supprimer ce post ?')) {
            try {
                const response = await fetch(`/api/posts/${id}`, {
                    method: 'DELETE',
                    headers: { 'Authorization': `Bearer ${getToken()}` }
                });
                const data = await response.json();
                console.log('Post supprimé:', data);
                getPosts();
            } catch (error) {
                console.error('Erreur lors de la suppression du post:', error);
            }
        }
    }

    async function editPost(id) {
        try {
            const token = localStorage.getItem('authToken');
            if (!token) {
                throw new Error('Pas de token d\'authentification');
            }

            const response = await fetch(`/api/posts/${id}`, {
                method: 'GET',
                headers: { 
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const post = await response.json();
            
            // Remplir le formulaire avec les données du post
            document.getElementById('postId').value = post.id;
            document.getElementById('postTitle').value = post.title;
            document.getElementById('postContent').value = post.content;
            
            // Afficher le formulaire d'édition
            document.getElementById('postForm').style.display = 'block';
        } catch (error) {
            console.error('Erreur lors de la récupération du post:', error);
            alert('Erreur lors de la récupération du post. Veuillez réessayer.');
        }
    }

    async function savePost() {
        const id = document.getElementById('postId').value;
        const title = document.getElementById('postTitle').value;
        const content = document.getElementById('postContent').value;
        
        const url = id ? `/api/posts/${id}` : '/api/posts';
        const method = id ? 'PUT' : 'POST';

        try {
            const response = await fetch(url, {
                method: method,
                headers: {
                    'Authorization': `Bearer ${getToken()}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ title, content })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            console.log('Post sauvegardé:', result);
            
            // Rafraîchir la liste des posts et réinitialiser le formulaire
            await getPosts();
            resetForm();
            
            alert(id ? 'Post mis à jour avec succès!' : 'Nouveau post créé avec succès!');
        } catch (error) {
            console.error('Erreur lors de la sauvegarde du post:', error);
            alert('Erreur lors de la sauvegarde du post. Veuillez réessayer.');
        }
    }

    function resetForm() {
        document.getElementById('postId').value = '';
        document.getElementById('postTitle').value = '';
        document.getElementById('postContent').value = '';
        document.getElementById('postForm').style.display = 'none';
    }

    // Assurez-vous que toutes les fonctions sont disponibles globalement
    window.login = login;
    window.getPosts = getPosts;
    window.editPost = editPost;
    window.savePost = savePost;
    window.deletePost = deletePost;

    console.log('Fonctions définies globalement:', {
        login: typeof window.login,
        getPosts: typeof window.getPosts,
        editPost: typeof window.editPost,
        savePost: typeof window.savePost,
        deletePost: typeof window.deletePost
    });

    // Vérification que le script est bien chargé
    console.log('Fin du chargement du script admin');
</script>
{% endblock %}