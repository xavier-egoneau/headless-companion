{% extends "layout.twig" %}

{% block title %}Administration - CMS Headless{% endblock %}

{% block content %}
    <div id="loginForm" style="display:none;">
        <h2>Connexion</h2>
        <input type="text" id="username" class="form-control mb-2" placeholder="Nom d'utilisateur">
        <input type="password" id="password" class="form-control mb-2" placeholder="Mot de passe">
        <button onclick="login()" class="btn btn-primary">Se connecter</button>
    </div>
    <div id="adminPanel" style="display:none;">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h2>Gestion des Posts</h2>
            <button onclick="logout()" class="btn btn-danger">Déconnexion</button>
        </div>
        <a href="/admin/post" class="btn btn-success mb-2">Nouveau Post</a>
        <div id="postsList"></div>
    </div>
{% endblock %}

{% block scripts %}
<script>
    async function login() {
        try {
            const response = await fetch('/api/auth', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    username: document.getElementById('username').value,
                    password: document.getElementById('password').value
                })
            });

            const data = await response.json();
            if (data.token) {
                localStorage.setItem('authToken', data.token);
                console.log('Token stocké:', data.token);
                document.getElementById('loginForm').style.display = 'none';
                document.getElementById('adminPanel').style.display = 'block';
                getPosts();
            } else {
                throw new Error('Token non reçu');
            }
        } catch (error) {
            console.error('Erreur de connexion:', error);
            alert('Erreur de connexion: ' + error.message);
        }
        if (data.token) {
            localStorage.setItem('authToken', data.token);
            showAdminPanel();
        } else {
            throw new Error('Token non reçu');
        }
    }

    async function getPosts() {
        try {
            const token = localStorage.getItem('authToken');
            if (!token) {
                throw new Error('Pas de token d\'authentification');
            }

            const response = await fetch('/api/posts', {
                headers: { 
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            const postsList = document.getElementById('postsList');
            postsList.innerHTML = data.posts.map(post => `
                <div class="card mb-2">
                    <div class="card-body">
                        <h5 class="card-title">${post.title}</h5>
                        <p class="card-text">${post.content.substring(0, 100)}...</p>
                        <a href="/admin/post/${post.id}" class="btn btn-warning btn-sm">Modifier</a>
                        <button onclick="deletePost(${post.id})" class="btn btn-danger btn-sm">Supprimer</button>
                    </div>
                </div>
            `).join('');
        } catch (error) {
            console.error('Erreur lors de la récupération des posts:', error);
            alert('Erreur lors de la récupération des posts: ' + error.message);
        }
    }

    async function deletePost(id) {
        if (confirm('Êtes-vous sûr de vouloir supprimer ce post ?')) {
            try {
                const response = await fetchWithToken(`/api/posts/${id}`, {
                    method: 'DELETE'
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                alert('Post supprimé avec succès');
                getPosts();
            } catch (error) {
                console.error('Erreur lors de la suppression du post:', error);
                alert('Erreur lors de la suppression du post. Veuillez réessayer.');
            }
        }
    }

    async function editPost(id) {
        try {
            const token = localStorage.getItem('authToken');
            if (!token) {
                throw new Error('Pas de token d\'authentification');
            }

            const response = await fetch(`/api/posts/${id}`, {
                headers: { 
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log('Données reçues de l\'API:', data);

            // Vérifiez si les données sont dans un objet 'post' ou directement dans la réponse
            const post = data.post || data;

            document.getElementById('postId').value = id;
            document.getElementById('postTitle').value = post.title || '';
            document.getElementById('postContent').value = post.content || '';
            
            // Affichage des valeurs dans la console pour le débogage
            console.log('ID:', id);
            console.log('Titre:', post.title);
            console.log('Contenu:', post.content);

            document.getElementById('formTitle').textContent = 'Modifier un post';
            document.getElementById('postForm').style.display = 'block';
        } catch (error) {
            console.error('Erreur lors de la récupération du post:', error);
            alert('Erreur lors de la récupération du post. Veuillez réessayer.');
        }
    }

     // Appeler getPosts() après une connexion réussie
    function showAdminPanel() {
        document.getElementById('loginForm').style.display = 'none';
        document.getElementById('adminPanel').style.display = 'block';
        getPosts();
    }

    function showNewPostForm() {
        document.getElementById('postId').value = '';
        document.getElementById('postTitle').value = '';
        document.getElementById('postContent').value = '';
        document.getElementById('formTitle').textContent = 'Ajouter un nouveau post';
        document.getElementById('postForm').style.display = 'block';
    }

    async function savePost() {
        try {
            const token = localStorage.getItem('authToken');
            if (!token) {
                throw new Error('Pas de token d\'authentification');
            }

            const id = document.getElementById('postId').value;
            const title = document.getElementById('postTitle').value;
            const content = document.getElementById('postContent').value;

            const url = id ? `/api/posts/${id}` : '/api/posts';
            const method = id ? 'PUT' : 'POST';

            const response = await fetch(url, {
                method: method,
                headers: { 
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ title, content })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            alert(id ? 'Post mis à jour avec succès' : 'Nouveau post créé avec succès');
            document.getElementById('postForm').style.display = 'none';
            getPosts();
        } catch (error) {
            console.error('Erreur lors de la sauvegarde du post:', error);
            alert('Erreur lors de la sauvegarde du post. Veuillez réessayer.');
        }
    }

    function cancelEdit() {
        document.getElementById('postForm').style.display = 'none';
    }

    async function refreshToken() {
        const refreshToken = localStorage.getItem('refreshToken');
        if (!refreshToken) {
            throw new Error('Pas de refresh token');
        }

        try {
            const response = await fetch('/api/refresh', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${refreshToken}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error('Erreur lors du rafraîchissement du token');
            }

            const data = await response.json();
            localStorage.setItem('authToken', data.token);
            return data.token;
        } catch (error) {
            console.error('Erreur lors du rafraîchissement du token:', error);
            // Rediriger vers la page de connexion si le rafraîchissement échoue
            window.location.href = '/admin';
        }
    }

    async function fetchWithToken(url, options = {}) {
        let token = localStorage.getItem('authToken');

        // Si pas de token, essayer de le rafraîchir
        if (!token) {
            try {
                token = await refreshToken();
            } catch (error) {
                // Si le rafraîchissement échoue, rediriger vers la page de connexion
                window.location.href = '/admin';
                throw error;
            }
        }

        // Préparer les options de la requête avec le token
        const fetchOptions = {
            ...options,
            headers: {
                ...options.headers,
                'Authorization': `Bearer ${token}`
            }
        };

        try {
            // Effectuer la requête
            const response = await fetch(url, fetchOptions);

            // Si le token est expiré (401), essayer de le rafraîchir
            if (response.status === 401) {
                try {
                    token = await refreshToken();
                    // Mettre à jour le token dans les options
                    fetchOptions.headers['Authorization'] = `Bearer ${token}`;
                    // Réessayer la requête avec le nouveau token
                    return await fetch(url, fetchOptions);
                } catch (error) {
                    // Si le rafraîchissement échoue, rediriger vers la page de connexion
                    window.location.href = '/admin';
                    throw error;
                }
            }

            return response;
        } catch (error) {
            console.error('Erreur lors de la requête:', error);
            throw error;
        }
    }

    function showAdminPanel() { 
        document.getElementById('loginForm').style.display = 'none';
        document.getElementById('adminPanel').style.display = 'block';
        getPosts();
    }

    function showLoginForm() {
        document.getElementById('loginForm').style.display = 'block';
        document.getElementById('adminPanel').style.display = 'none';
    }

    function logout() {
        // Effacer les tokens du localStorage
        localStorage.removeItem('authToken');
        localStorage.removeItem('refreshToken');

        // Rediriger vers la page de connexion
        showLoginForm();
    }

    // Vérifier l'état de connexion au chargement de la page
    document.addEventListener('DOMContentLoaded', function() {
        const token = localStorage.getItem('authToken');
        if (token) {
            showAdminPanel();
        } else {
            showLoginForm();
        }
    });

</script>
{% endblock %}