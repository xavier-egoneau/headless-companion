{% extends "layout.twig" %}

{% block title %}{% if postId %}Modifier{% else %}Ajouter{% endif %} un Post - CMS Headless{% endblock %}

{% block content %}
    <h2>{% if postId %}Modifier{% else %}Ajouter{% endif %} un Post</h2>
    <form id="postForm">
        <input type="hidden" id="postId" value="{{ postId }}">
        <div class="mb-3">
            <label for="postTitle" class="form-label">Titre</label>
            <input type="text" class="form-control" id="postTitle" required>
        </div>
        <div class="mb-3">
            <label for="postContent" class="form-label">Contenu</label>
            <textarea class="form-control" id="postContent" rows="5" required></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Enregistrer</button>
        <a href="/admin" class="btn btn-secondary" id="backButton">Retour</a>
    </form>
{% endblock %}

{% block scripts %}
<script>
    const postId = document.getElementById('postId').value;

    async function refreshToken() {
        const refreshToken = localStorage.getItem('refreshToken');
        if (!refreshToken) {
            throw new Error('Pas de refresh token');
        }

        try {
            const response = await fetch('/api/refresh', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${refreshToken}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error('Erreur lors du rafraîchissement du token');
            }

            const data = await response.json();
            localStorage.setItem('authToken', data.token);
            return data.token;
        } catch (error) {
            console.error('Erreur lors du rafraîchissement du token:', error);
            window.location.href = '/admin';
            throw error;
        }
    }

    async function fetchWithToken(url, options = {}) {
        let token = localStorage.getItem('authToken');

        if (!token) {
            try {
                token = await refreshToken();
            } catch (error) {
                window.location.href = '/admin';
                throw error;
            }
        }

        const fetchOptions = {
            ...options,
            headers: {
                ...options.headers,
                'Authorization': `Bearer ${token}`
            }
        };

        try {
            const response = await fetch(url, fetchOptions);

            if (response.status === 401) {
                try {
                    token = await refreshToken();
                    fetchOptions.headers['Authorization'] = `Bearer ${token}`;
                    return await fetch(url, fetchOptions);
                } catch (error) {
                    window.location.href = '/admin';
                    throw error;
                }
            }

            return response;
        } catch (error) {
            console.error('Erreur lors de la requête:', error);
            throw error;
        }
    }

    async function loadPost() {
        if (!postId) return;

        try {
            const response = await fetchWithToken(`/api/posts/${postId}`);

            if (!response.ok) throw new Error('Erreur lors du chargement du post');

            const post = await response.json();
            document.getElementById('postTitle').value = post.title;
            document.getElementById('postContent').value = post.content;
        } catch (error) {
            console.error('Erreur:', error);
            alert('Erreur lors du chargement du post');
        }
    }

    document.getElementById('postForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        const title = document.getElementById('postTitle').value;
        const content = document.getElementById('postContent').value;

        try {
            const url = postId ? `/api/posts/${postId}` : '/api/posts';
            const method = postId ? 'PUT' : 'POST';

            const response = await fetchWithToken(url, {
                method: method,
                headers: { 
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ title, content })
            });

            if (!response.ok) throw new Error('Erreur lors de la sauvegarde du post');

            alert(postId ? 'Post mis à jour avec succès' : 'Nouveau post créé avec succès');
            
            // Utilisez window.location.replace au lieu de window.location.href
            window.location.replace('/admin');
        } catch (error) {
            console.error('Erreur:', error);
            alert('Erreur lors de la sauvegarde du post');
        }
    });

    // Gérer le bouton retour
    document.getElementById('backButton').addEventListener('click', function(e) {
        e.preventDefault();
        window.location.replace('/admin');
    });

    loadPost();
</script>
{% endblock %}